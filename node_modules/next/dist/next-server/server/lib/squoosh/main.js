"use strict";exports.__esModule=true;exports.processBuffer=processBuffer;var _jestWorker=require("jest-worker");var path=_interopRequireWildcard(require("path"));var _utils=require("../../../lib/utils");var _impl=require("./impl");exports.Operation=_impl.Operation;function _getRequireWildcardCache(){if(typeof WeakMap!=="function")return null;var cache=new WeakMap();_getRequireWildcardCache=function(){return cache;};return cache;}function _interopRequireWildcard(obj){if(obj&&obj.__esModule){return obj;}if(obj===null||typeof obj!=="object"&&typeof obj!=="function"){return{default:obj};}var cache=_getRequireWildcardCache();if(cache&&cache.has(obj)){return cache.get(obj);}var newObj={};var hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj){if(Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;if(desc&&(desc.get||desc.set)){Object.defineProperty(newObj,key,desc);}else{newObj[key]=obj[key];}}}newObj.default=obj;if(cache){cache.set(obj,newObj);}return newObj;}const getWorker=(0,_utils.execOnce)(()=>new _jestWorker.Worker(path.resolve(__dirname,'impl'),{enableWorkerThreads:true}));async function processBuffer(buffer,operations,encoding,quality){const worker=getWorker();return Buffer.from(await worker.processBuffer(buffer,operations,encoding,quality));}
//# sourceMappingURL=main.js.map