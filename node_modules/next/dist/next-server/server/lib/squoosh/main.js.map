{"version":3,"sources":["../../../../../next-server/server/lib/squoosh/main.ts"],"names":["getWorker","Worker","path","resolve","__dirname","enableWorkerThreads","processBuffer","buffer","operations","encoding","quality","worker","Buffer","from"],"mappings":"yEAAA,uCACA,kDACA,yCACA,4B,u1BAEA,KAAMA,CAAAA,SAAS,CAAG,oBAChB,IACE,GAAIC,mBAAJ,CAAWC,IAAI,CAACC,OAAL,CAAaC,SAAb,CAAwB,MAAxB,CAAX,CAA4C,CAC1CC,mBAAmB,CAAE,IADqB,CAA5C,CAFc,CAAlB,CASO,cAAeC,CAAAA,aAAf,CACLC,MADK,CAELC,UAFK,CAGLC,QAHK,CAILC,OAJK,CAKY,CACjB,KAAMC,CAAAA,MAA+B,CAAGX,SAAS,EAAjD,CACA,MAAOY,CAAAA,MAAM,CAACC,IAAP,CACL,KAAMF,CAAAA,MAAM,CAACL,aAAP,CAAqBC,MAArB,CAA6BC,UAA7B,CAAyCC,QAAzC,CAAmDC,OAAnD,CADD,CAAP,CAGD","sourcesContent":["import { Worker } from 'jest-worker'\nimport * as path from 'path'\nimport { execOnce } from '../../../lib/utils'\nimport { Operation, Encoding } from './impl'\n\nconst getWorker = execOnce(\n  () =>\n    new Worker(path.resolve(__dirname, 'impl'), {\n      enableWorkerThreads: true,\n    })\n)\n\nexport { Operation }\n\nexport async function processBuffer(\n  buffer: Buffer,\n  operations: Operation[],\n  encoding: Encoding,\n  quality: number\n): Promise<Buffer> {\n  const worker: typeof import('./impl') = getWorker() as any\n  return Buffer.from(\n    await worker.processBuffer(buffer, operations, encoding, quality)\n  )\n}\n"]}