{"version":3,"sources":["../../../../../next-server/server/lib/squoosh/impl.ts"],"names":["processBuffer","buffer","operations","encoding","quality","imageData","decodeBuffer","operation","type","rotate","numRotations","width","resize","encodeJpeg","encodeWebp","encodePng","Error","_buffer","Buffer","from","firstChunk","slice","firstChunkString","Array","map","v","String","fromCodePoint","join","key","Object","entries","supportedFormats","find","detectors","some","detector","exec","d","dec","rgba","decode","Uint8Array","image","ImageData","m","preprocessors","instantiate","data","height","p","defaultOptions","e","enc","r","encode","defaultEncoderOptions"],"mappings":"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","sourcesContent":["import { codecs as supportedFormats, preprocessors } from './codecs'\nimport ImageData from './image_data'\n\ntype RotateOperation = {\n  type: 'rotate'\n  numRotations: number\n}\ntype ResizeOperation = {\n  type: 'resize'\n  width: number\n}\nexport type Operation = RotateOperation | ResizeOperation\nexport type Encoding = 'jpeg' | 'png' | 'webp'\n\nexport async function processBuffer(\n  buffer: Buffer | Uint8Array,\n  operations: Operation[],\n  encoding: Encoding,\n  quality: number\n): Promise<Buffer | Uint8Array> {\n  let imageData = await decodeBuffer(buffer)\n  for (const operation of operations) {\n    if (operation.type === 'rotate') {\n      imageData = await rotate(imageData, operation.numRotations)\n    } else if (operation.type === 'resize') {\n      if (imageData.width && imageData.width > operation.width) {\n        imageData = await resize(imageData, operation.width)\n      }\n    }\n  }\n\n  switch (encoding) {\n    case 'jpeg':\n      return encodeJpeg(imageData, { quality })\n    case 'webp':\n      return encodeWebp(imageData, { quality })\n    case 'png':\n      return encodePng(imageData)\n    default:\n      throw Error(`Unsupported encoding format`)\n  }\n}\n\nasync function decodeBuffer(_buffer: Buffer | Uint8Array): Promise<ImageData> {\n  const buffer = Buffer.from(_buffer)\n  const firstChunk = buffer.slice(0, 16)\n  const firstChunkString = Array.from(firstChunk)\n    .map((v) => String.fromCodePoint(v))\n    .join('')\n  const key = Object.entries(supportedFormats).find(([, { detectors }]) =>\n    detectors.some((detector) => detector.exec(firstChunkString))\n  )?.[0] as keyof typeof supportedFormats\n  if (!key) {\n    throw Error(`Buffer has an unsupported format`)\n  }\n  const d = await supportedFormats[key].dec()\n  const rgba = d.decode(new Uint8Array(buffer))\n  return rgba\n}\n\nasync function rotate(\n  image: ImageData,\n  numRotations: number\n): Promise<ImageData> {\n  image = ImageData.from(image)\n\n  const m = await preprocessors['rotate'].instantiate()\n  return await m(image.data, image.width, image.height, { numRotations })\n}\n\nasync function resize(image: ImageData, width: number) {\n  image = ImageData.from(image)\n\n  const p = preprocessors['resize']\n  const m = await p.instantiate()\n  return await m(image.data, image.width, image.height, {\n    ...p.defaultOptions,\n    width,\n  })\n}\n\nasync function encodeJpeg(\n  image: ImageData,\n  { quality }: { quality: number }\n): Promise<Buffer | Uint8Array> {\n  image = ImageData.from(image)\n\n  const e = supportedFormats['mozjpeg']\n  const m = await e.enc()\n  const r = await m.encode!(image.data, image.width, image.height, {\n    ...e.defaultEncoderOptions,\n    quality,\n  })\n  return Buffer.from(r)\n}\n\nasync function encodeWebp(\n  image: ImageData,\n  { quality }: { quality: number }\n): Promise<Buffer | Uint8Array> {\n  image = ImageData.from(image)\n\n  const e = supportedFormats['webp']\n  const m = await e.enc()\n  const r = await m.encode!(image.data, image.width, image.height, {\n    ...e.defaultEncoderOptions,\n    quality,\n  })\n  return Buffer.from(r)\n}\n\nasync function encodePng(image: ImageData): Promise<Buffer | Uint8Array> {\n  image = ImageData.from(image)\n\n  const e = supportedFormats['oxipng']\n  const m = await e.enc()\n  const r = await m.encode(image.data, image.width, image.height, {\n    ...e.defaultEncoderOptions,\n  })\n  return Buffer.from(r)\n}\n"]}